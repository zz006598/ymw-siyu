<?php
/**
 * +----------------------------------------------------------------------
 * | 首页控制器
 * +----------------------------------------------------------------------
 *                      .::::.
 *                    .::::::::.            | AUTHOR: siyu
 *                    :::::::::::           | EMAIL: 407593529@qq.com
 *                 ..:::::::::::'           | QQ: 407593529
 *             '::::::::::::'               | DATETIME: 2019/04/12
 *                .::::::::::
 *           '::::::::::::::..
 *                ..::::::::::::.
 *              ``::::::::::::::::
 *               ::::``:::::::::'        .:::.
 *              ::::'   ':::::'       .::::::::.
 *            .::::'      ::::     .:::::::'::::.
 *           .:::'       :::::  .:::::::::' ':::::.
 *          .::'        :::::.:::::::::'      ':::::.
 *         .::'         ::::::::::::::'         ``::::.
 *     ...:::           ::::::::::::'              ``::.
 *   ```` ':.          ':::::::::'                  ::::..
 *                      '.:::::'                    ':'````..
 * +----------------------------------------------------------------------
 */
namespace app\index\controller;

use addons\payment\service\Handel;
use app\common\facade\Cms;
use app\common\model\Module;
use app\common\model\orders;
use app\common\model\Payments;
use app\common\model\Resource;
use app\common\model\Users;
use app\common\model\UsersCollect;
use app\common\model\UsersDownLogs;
use app\common\model\UsersSignLogs;
use app\common\model\UsersType;
use think\captcha\facade\Captcha;
use think\facade\Db;
use think\facade\Request;
use think\facade\View;

class Index extends Base
{
    public function initialize()
    {
        View::assign('logined',$this->logined);
        parent::initialize(); // TODO: Change the autogenerated stub
    }

    // 首页
    public function index()
    {
        // 后台开启手机端的时候PC自动跳转到mobile
        if ($this->system['mobile'] == '1' && $this->appName == 'index') {
            if (Request::isMobile()) {
                return redirect('mobile/index/index');
            }
        }





        $view = [
            'cate'       => ['topid' => 0],          // 栏目信息
            'system'      => $this->system,          // 系统信息
            'tplData'     => $this->tplData,         // 模板配置
            'cates'       => $this->cates,           // 模板配置
            'logined'     => $this->logined,           // 模板配置
            'public'      => $this->public,          // 公共目录
            'title'       => $this->system['title'] ? $this->system['title'] : $this->system['name'], // seo信息
            'keywords'    => $this->system['key'],   // seo信息
            'description' => $this->system['des'],   // seo信息
        ];

        $template = $this->template . 'index.html';
        View::assign($view);
        return View::fetch($template);
    }

    /**
     * 搜索页面
     */
//    public function search () {
//        $keyword = $_GET['keyword'];
//        $cate_id = $_GET['cid'];
//
//        if (empty($keyword)) {
//            $this->error('关键词不能为空');
//        }
//
//        if (empty($cate_id)) {
//            $this->error('非法请求');
//        }
//
//        // 获取所有模型
//        $modules = $this->modules->column(null, 'id');
//        if (empty($modules[$cate_id])) {
//            $this->error('未找到栏目模型');
//        }
//
//        // 获取栏目信息
//        $cate = Cms::getCateInfo($cate_id);
//
//
//
//        if (empty($cate)) {
//            $this->error('未找到对应栏目');
//        }
//
//        $table = $modules['table_name'];
//
//        $list = Db::table($table)->where('title', 'like', "%{$keyword}%")->select();
//
//        View::assign('list', $list);
//
//        return View::fetch('search');
//    }

    // 搜索
    public function search(){
        $search = Request::param('search'); // 关键字
        if(empty($search)){
            $this->error('请输入关键词');
        }

        $view = [
            'cate'       => ['topid' => 0], // 栏目信息
            'search'      => $search,       // 关键字
            'system'      => $this->system, // 系统信息
            'public'      => $this->public, // 公共目录
            'title'       => $this->system['title'] ? $this->system['title'] : $this->system['name'], //seo信息
            'keywords'    => $this->system['key'],   //seo信息
            'description' => $this->system['des'],   //seo信息
        ];

        $template = $this->template.'search.html';
        View::assign($view);
        return View::fetch($template);
    }

    // 标签
    public function tag(){
        $tag = Request::param('t', '', 'htmlspecialchars');
        if (empty($tag)) {
            $this->error('请输入关键词');
        }

        $view = [
            'cate'       => ['topid' => 0],          // 栏目信息
            'tag'         => $tag,                   // 关键字
            'system'      => $this->system,          // 系统信息
            'public'      => $this->public,          // 公共目录
            'tplData'     => $this->tplData,          // 公共目录
            'title'       => $this->system['title'] ? $this->system['title'] : $this->system['name'],
            'keywords'    => $this->system['key'],
            'description' => $this->system['des'],
        ];

        $template = $this->template . 'tag.html';
        View::assign($view);
        return View::fetch($template);
    }

    // 留言表单提交
    public function add(){
        $result = ['error'=>'','msg'=>''];
        if (Request::isPost()) {
            $data = Request::post('', '', 'htmlspecialchars');
            $data['create_time'] = time();
            $data['status'] = 0;

            // 是否开启验证码
            if ($this->system['message_code']) {
                if (!captcha_check($data['message_code'])) {
                    $this->error('验证码错误');
                } else {
                    unset($data['message_code']);
                }
            }

            // 查询模型id
            $moduleId = Db::name('cate')
                ->where('id','=',Request::param('cate_id'))
                ->value('module_id');
            // 查询该模型所有必填字段
            $fields = Db::name('field')
                ->where('module_id', $moduleId)
                ->select()
                ->toArray();
            foreach ($fields as $k => $v) {
                //必填项判断
                if (isset($data[$v['field']]) && $v['required'] == 1 && $data[$v['field']] === '' ) {
                    $result['error'] = '1';
                    $result['msg'] = $v['name'] . '为必填项';
                }
                // 多选转换
                if ($v['type'] == 'checkbox') {
                    //如填写则进行转换
                    if (isset($data[$v['field']])) {
                        $data[$v['field']] = implode(",", $data[$v['field']]);
                    }
                    // 多选必填项单独判断
                    if ($v['required'] == 1 && !isset($data[$v['field']])) {
                        $result['error'] = '1';
                        $result['msg'] = $v['name'] . '为必选项';
                    }
                }
            }


            if ($result['error'] !== '1') {
                $tableName = Db::name('module')
                    ->where('id','=',$moduleId)
                    ->value('table_name');
                $id = Db::name($tableName)
                    ->insertGetId($data);
                if ($id) {
                    $result['error'] = '0';
                    $result['msg']   = '留言成功';
                    //邮件通知开始
                    if ($this->system['message_send_mail']) {
                        //去除无用字段
                        unset($data['cate_id']);
                        unset($data['status']);
                        //默认收件人为系统设置中的邮件
                        $email = $this->system['email'];
                        $title = 'SIYUCMS提醒：您的网站有新的留言';
                        //拼接内容
                        $fields = Db::name('field')
                            ->where('module_id',$moduleId)
                            ->select();
                        $content = '';
                        foreach ($fields as $k => $v) {
                            if (isset($data[$v['field']])) {
                                if ($v['type'] == 'datetime') {
                                    $data[$v['field']] = date("Y-m-d H:i",$data[$v['field']]);
                                }
                                $content .= '<br>'.$v['name'].' : '.$data[$v['field']];
                            }
                        }
                        $this->trySend($email,$title,$content);
                    }
                    //邮件通知结束
                    $this->success($result['msg']);
                } else {
                    $result['error'] = '1';
                    $result['msg']  .= '留言失败;';
                    $this->error($result['msg']);
                }
            } else {
                $this->error($result['msg']);
            }

        }
    }

    // 验证码
    public function captcha(){
        return Captcha::create();
    }

    // 邮件发送
    private function trySend($email,$title,$content){
        //检查是否邮箱格式
        if (!is_email($email)) {
            return ['error' => 1, 'msg' => '邮箱码格式有误'];
        }
        $send = send_email($email, $title,$content);
        if ($send) {
            return ['error' => 0, 'msg' => '邮件发送成功！'];
        } else {
            return ['error' => 1, 'msg' => '邮件发送失败！'];
        }
    }

    /**
     * 支付接口
     * @throws \think\db\exception\DataNotFoundException
     * @throws \think\db\exception\DbException
     * @throws \think\db\exception\ModelNotFoundException
     */
    public function doPay () {

        $pay_id         = Request::post('pay_id');
        $data_id        = Request::post('data_id');
        $data_type_id   = Request::post('data_type_id');
        $price          = Request::post('price');

        if (!$this->userId) {
            $this->error('请先登录',url('/user/login',['redirect' => Request::server('HTTP_REFERER')]));
        }

        if (empty($data_id)) {
            $this->error('请选择购买资源');
        }

        $payment = Payments::find($pay_id);

        if (!$payment) {
            $this->error('未开通此支付方式');
        }

        $module = Module::find($data_type_id);

        if (!$module) {
            $this->error('模块不存在');
        }

        $table      = $module->table_name;
        $model_name = $module->model_name;

        $model = 'app\\common\\model\\'.$model_name;
        $data  = $model::find($data_id);

        if (!$data) {
            $this->error('资源不存在');
        }

        $prices_map = parsePricesToMap($data['vip_discounts_price'], $data['price']);
        $my_price   = floatval($prices_map[$this->logined['type_id']] ?? $data['price']);
        $price      = $data->price;

        $order_no = createOrderId();
        $title    = $data->title;

        if ($my_price) {
            // 创建统一订单
            $order = orders::create([
                'order_id'          => $order_no,
                'price'             => $price,
                'discounts_price'   => $my_price,
                'title'             => $title,
                'payment'           => $pay_id,
                'uid'               => $this->userId,
                'business'          => 3,
                'data_id'           => $data_id
            ]);

            $res = Handel::submit($payment->identify,$order_no,$my_price, $title);

            if ($res['type'] === 'html') {
                $this->success([
                    'html' => $res['html'],
                    'order_id' => $order_no
                ]);
            }
            else if ($res['type'] === 'json') {

                $order->pay_status = 1;
                if ($res['error']) {
                    $order->pay_status = 2;
                }

                if (!$order->save()) {
                    $this->error('订单异常错误，请联系管理员处理');
                }

                if ($order->pay_status === 1) {
                    $data->buy_count ++;
                    $data->save();
                    $this->success([
                        'html' => '恭喜您，购买成功',
                        'order_id' => $order_no
                    ]);
                }
                elseif ($order->pay_status === 2) {
                    $this->error($res['error']);
                }

            }
        } else {
            $this->success([
                'html' => '此商品无需购买'
            ]);
        }


    }

    /**
     * 下载接口
     * @throws \think\db\exception\DataNotFoundException
     * @throws \think\db\exception\DbException
     * @throws \think\db\exception\ModelNotFoundException
     */
    public function doDown () {

        if (!$this->userId) {
            $this->error('请先登录',url('/user/login',['redirect' => Request::server('HTTP_REFERER')]));
        }

        $id = intval(Request::param('id'));

        if (empty($id)) {
            $this->error('非法请求');
        }

        $find = Resource::find($id);

        if (!$find) {
            $this->error('资源不存在或已删除');
        }

        // 判断是否免费
        $type_id    = $this->logined['type_id'];
        $prices_map = parsePricesToMap($find['vip_discounts_price'], $find['price']);
        $my_price   = floatval($prices_map[$type_id] ?? $find['price']);

        if ($my_price && orders::where('data_id', $id)->where('pay_status', 1)->where('business', 3)->count()) {
            $my_price = 0;
        }

        if ($my_price) {
            $this->error('请先支付!');
        }

        // 判断今日下载次数
        $my_down_count = UsersDownLogs::where('to_days(FROM_UNIXTIME(create_time)) = to_days(now())')->where('uid',$this->userId)->count('DISTINCT down_id');
        if ($my_down_count >= $this->logined->UsersType->free_down_num) {
            $this->error('今日下载次数已用完，请明日再试!');
        }
        UsersDownLogs::create([
            'title' => $find['title'],
            'uid'   => $this->userId,
            'down_type' => Resource::class,
            'down_id'   => $id
        ]);

        $this->success($find['down_url']);
    }

    public function sign () {
        if (!$this->userId) {
            $this->error('请先登录',url('/user/login',['redirect' => Request::server('HTTP_REFERER')]));
        }

        $is_sign = UsersSignLogs::where('uid',$this->userId)->count();

        if ($is_sign) {
            $this->error('您已签过到');
        }

        UsersSignLogs::create([
            'uid' => $this->userId
        ]);

        $this->success('签到成功');
    }

    /**
     * 收藏接口
     */
    public function collect () {

        if (!$this->userId) {
            $this->error('请先登录',url('/user/login',['redirect' => Request::server('HTTP_REFERER')]));
        }

        $id     = Request::param('id');
        $mid    = Request::param('mid');

        if (empty($id) || empty($mid)) {
            $this->error('非法请求');
        }

        $module = Module::find($mid);

        if (!$module) {
            $this->error('数据模型已失效');
        }

        $table = $module->table_name;
        $class = '\\app\\common\\model\\'.$module->model_name;
        $data  = $class::find($id);

        if (!$data) {
            $this->error('收藏数据不存在');
        }

        $find = UsersCollect::where('collect_type',$class)->where('collect_id', $id)->find();

        if ($find) {
            UsersCollect::del($find->id);
            $this->success('已取消收藏');
        }
        else {
            UsersCollect::create([
                'collect_id'    => $id,
                'collect_type'  => $class,
                'title'         => $data->title,
                'uid'           => $this->userId,
                'status'        => 1
            ]);
            $this->success('收藏成功');
        }

    }

}
